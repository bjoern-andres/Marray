cmake_minimum_required(VERSION 2.6)
enable_testing()
project(marray)
include_directories(include include/andres)
file(GLOB headers include/andres/*)

if(CMAKE_COMPILER_IS_GNUCXX)
    add_definitions(-Wall)
endif()

if(MSVC)
    add_definitions(-D_CRT_SECURE_NO_DEPRECATE -D_HDF5USEDLL_)
endif()

# ------------------------------------------------------------------------------
# doxygen
# ------------------------------------------------------------------------------
find_package(Doxygen QUIET)
if(DOXYGEN_FOUND)
    message(STATUS "Doxygen found.")
else()
    message("doxygen not found.")
endif()

# ------------------------------------------------------------------------------
# C++11
# ------------------------------------------------------------------------------
set(WITH_CPP11 CACHE BOOL "Compile with C++11 features.")
if(WITH_CPP11)
    if(CMAKE_COMPILER_IS_GNUCXX)
        message(STATUS "C++11 support enabled.")
        add_definitions(-std=gnu++0x)
        add_definitions(-fno-deduce-init-list)
        add_definitions(-DHAVE_CPP11_INITIALIZER_LISTS)
        add_definitions(-DHAVE_CPP11_VARIADIC_TEMPLATES)
        # add_definitions(-DHAVE_CPP11_TEMPLATE_ALIASES) # not supported in GNU G++ 4.4
    else()
        message("C++11 support disabled. Add flags for your compiler in CMakeLists.txt to compile with C++11 features.")
    endif()
else()
    message(STATUS "C++11 support disabled.")
endif()

# ------------------------------------------------------------------------------
# hdf5
# ------------------------------------------------------------------------------

# http://t3hmikez0r.com/2014/07/11/cmake-and-hdf5-revisited/
# back up any user-defined HDF5_DIR setting
set(_SAVED_HDF5_DIR ${HDF5_DIR})
# First look for hdf5-config.cmake in defined locations.
# This file is generated by HDF5 team and is likely more up to date than FindHDF5.cmake included in CMake.
FIND_PACKAGE(HDF5 NO_MODULE)
IF(NOT HDF5_FOUND)
    # didn't find hdf5-config.cmake. Need to fall back on CMake's built-in FindHDF5.cmake logic.
    # required says we fail if it isn't found.
    # Restore the value reset by the previous call to 'find_package(HDF5 NO_MODULE)'
    set(HDF5_DIR ${_SAVED_HDF5_DIR} CACHE PATH "HDF5 install dir" FORCE)
    FIND_PACKAGE(HDF5)
ENDIF()

# ------------------------------------------------------------------------------
# targets
# ------------------------------------------------------------------------------
add_executable(tutorial-marray src/tutorial/tutorial.cxx ${headers})

add_executable(test-marray src/unittest/marray.cxx ${headers})
add_test(test-marray test-marray)

if(HDF5_FOUND)
    add_executable(test-hdf5 src/unittest/hdf5.cxx ${headers})
    if(TARGET hdf5-shared)
      # NOTE: if the hdf5-shared target exists, it means that the NO_MODULE
      # find_package() was successful. We just need to link the imported target
      # and this will bring in the include dirs as well.
      target_link_libraries(test-hdf5 hdf5-shared)
    else()
      # Otherwise, we use the CMake variables provided by the usual
      # find_package() call.
      target_include_directories(test-hdf5 PRIVATE ${HDF5_INCLUDE_DIRS})
      target_link_libraries(test-hdf5 ${HDF5_LIBRARIES})
    endif()
    add_test(test-hdf5 test-hdf5)

    add_executable(test-marray-hdf5 src/unittest/marray-hdf5.cxx ${headers})
    if(TARGET hdf5-shared)
      target_link_libraries(test-marray-hdf5 hdf5-shared)
    else()
      target_include_directories(test-marray-hdf5 PRIVATE ${HDF5_INCLUDE_DIRS})
      target_link_libraries(test-marray-hdf5 ${HDF5_LIBRARIES})
    endif()
    add_test(test-marray-hdf5 test-marray-hdf5)

    add_executable(tutorial-marray-hdf5 src/tutorial/tutorial-hdf5.cxx ${headers})
    if(TARGET hdf5-shared)
      target_link_libraries(tutorial-marray-hdf5 hdf5-shared)
    else()
      target_include_directories(tutorial-marray-hdf5 PRIVATE ${HDF5_INCLUDE_DIRS})
      target_link_libraries(tutorial-marray-hdf5 ${HDF5_LIBRARIES})
    endif()
endif()

if(DOXYGEN_FOUND)
    configure_file("${marray_SOURCE_DIR}/doxygen/Doxyfile.in" "${marray_BINARY_DIR}/Doxyfile" @ONLY IMMEDIATE)
    add_custom_target(doc-marray ALL COMMAND ${DOXYGEN} "${marray_BINARY_DIR}/Doxyfile")
endif()

# Install the headers.
install(DIRECTORY "${CMAKE_CURRENT_SOURCE_DIR}/include/andres" DESTINATION include)
